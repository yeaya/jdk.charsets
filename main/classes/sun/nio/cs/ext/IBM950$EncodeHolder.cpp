#include <sun/nio/cs/ext/IBM950$EncodeHolder.h>

#include <sun/nio/cs/DoubleByte$Encoder.h>
#include <sun/nio/cs/ext/IBM950$DecodeHolder.h>
#include <sun/nio/cs/ext/IBM950.h>
#include <jcpp.h>

using $ClassInfo = ::java::lang::ClassInfo;
using $FieldInfo = ::java::lang::FieldInfo;
using $InnerClassInfo = ::java::lang::InnerClassInfo;
using $MethodInfo = ::java::lang::MethodInfo;
using $DoubleByte$Encoder = ::sun::nio::cs::DoubleByte$Encoder;
using $IBM950 = ::sun::nio::cs::ext::IBM950;
using $IBM950$DecodeHolder = ::sun::nio::cs::ext::IBM950$DecodeHolder;

namespace sun {
	namespace nio {
		namespace cs {
			namespace ext {

$FieldInfo _IBM950$EncodeHolder_FieldInfo_[] = {
	{"c2b", "[C", nullptr, $STATIC | $FINAL, $staticField(IBM950$EncodeHolder, c2b)},
	{"c2bIndex", "[C", nullptr, $STATIC | $FINAL, $staticField(IBM950$EncodeHolder, c2bIndex)},
	{}
};

$MethodInfo _IBM950$EncodeHolder_MethodInfo_[] = {
	{"<init>", "()V", nullptr, 0, $method(static_cast<void(IBM950$EncodeHolder::*)()>(&IBM950$EncodeHolder::init$))},
	{}
};

$InnerClassInfo _IBM950$EncodeHolder_InnerClassesInfo_[] = {
	{"sun.nio.cs.ext.IBM950$EncodeHolder", "sun.nio.cs.ext.IBM950", "EncodeHolder", $STATIC},
	{}
};

$ClassInfo _IBM950$EncodeHolder_ClassInfo_ = {
	$ACC_SUPER,
	"sun.nio.cs.ext.IBM950$EncodeHolder",
	"java.lang.Object",
	nullptr,
	_IBM950$EncodeHolder_FieldInfo_,
	_IBM950$EncodeHolder_MethodInfo_,
	nullptr,
	nullptr,
	_IBM950$EncodeHolder_InnerClassesInfo_,
	nullptr,
	nullptr,
	nullptr,
	"sun.nio.cs.ext.IBM950"
};

$Object* allocate$IBM950$EncodeHolder($Class* clazz) {
	return $of($alloc(IBM950$EncodeHolder));
}

$chars* IBM950$EncodeHolder::c2b = nullptr;
$chars* IBM950$EncodeHolder::c2bIndex = nullptr;

void IBM950$EncodeHolder::init$() {
}

void clinit$IBM950$EncodeHolder($Class* class$) {
	$useLocalCurrentObjectStackCache();
	$assignStatic(IBM950$EncodeHolder::c2b, $new($chars, 32512));
	$assignStatic(IBM950$EncodeHolder::c2bIndex, $new($chars, 256));
	{
		$var($String, b2cNR, nullptr);
		$var($String, c2bNR, $cstr({0xA440, 0x4E00, 0xA441, 0x4E59, 0xA447, 0x4E8C, 0xA448, 0x4EBA, 0xA449, 0x513F, 0xA44A, 0x5165, 0xA44B, 0x516B, 0xA44C, 0x51E0, 0xA44D, 0x5200, 0xA44F, 0x529B, 0xA450, 0x5315, 0xA451, 0x5341, 0xA452, 0x535C, 0xA453, 0x53C8, 0xA466, 0x53E3, 0xA467, 0x571F, 0xA468, 0x58EB, 0xA469, 0x5915, 0xA46A, 0x5927, 0xA46B, 0x5973, 0xA46C, 0x5B50, 0xA46F, 0x5BF8, 0xA470, 0x5C0F, 0xA471, 0x5C22, 0xA472, 0x5C38, 0xA473, 0x5C71, 0xA475, 0x5DE5, 0xA476, 0x5DF1, 0xA479, 0x5DFE, 0xA47A, 0x5E72, 0xA47B, 0x5EFE, 0xA47C, 0x5F0B, 0xA47D, 0x5F13, 0xA4CA, 0x5345, 0xA4DF, 0x5FC3, 0xA4E0, 0x6208, 0xA4E1, 0x6236, 0xA4E2, 0x624B, 0xA4E4, 0x652F, 0xA4E5, 0x6587, 0xA4E6, 0x6597, 0xA4E7, 0x65A4, 0xA4E8, 0x65B9, 0xA4E9, 0x65E5, 0xA4EA, 0x66F0, 0xA4EB, 0x6708, 0xA4EC, 0x6728, 0xA4ED, 0x6B20, 0xA4EE, 0x6B62, 0xA4EF, 0x6B79, 0xA4F0, 0x6BCB, 0xA4F1, 0x6BD4, 0xA4F2, 0x6BDB, 0xA4F3, 0x6C0F, 0xA4F4, 0x6C34, 0xA4F5, 0x706B, 0xA4F6, 0x722A, 0xA4F7, 0x7236, 0xA4F8, 0x723B, 0xA4F9, 0x7247, 0xA4FA, 0x7259, 0xA4FB, 0x725B, 0xA4FC, 0x72AC, 0xA5C8, 0x7384, 0xA5C9, 0x7389, 0xA5CA, 0x74DC, 0xA5CB, 0x74E6, 0xA5CC, 0x7518, 0xA5CD, 0x751F, 0xA5CE, 0x7528, 0xA5D0, 0x7530, 0xA5D4, 0x758B, 0xA5D5, 0x767D, 0xA5D6, 0x76AE, 0xA5D7, 0x76BF, 0xA5D8, 0x76EE, 0xA5D9, 0x77DB, 0xA5DA, 0x77E2, 0xA5DB, 0x77F3, 0xA5DC, 0x793A, 0xA5DD, 0x79BE, 0xA5DE, 0x7A74, 0xA5DF, 0x7ACB, 0xA6CB, 0x7AF9, 0xA6CC, 0x7C73, 0xA6CD, 0x7CF8, 0xA6CE, 0x7F36, 0xA6CF, 0x7F8A, 0xA6D0, 0x7FBD, 0xA6D1, 0x8001, 0xA6D3, 0x800C, 0xA6D4, 0x8012, 0xA6D5, 0x8033, 0xA6D6, 0x807F, 0xA6D7, 0x8089, 0xA6DA, 0x81E3, 0xA6DB, 0x81EA, 0xA6DC, 0x81F3, 0xA6DD, 0x81FC, 0xA6DE, 0x820C, 0xA6DF, 0x821B, 0xA6E0, 0x821F, 0xA6E1, 0x826E, 0xA6E2, 0x8272, 0xA6E4, 0x866B, 0xA6E5, 0x8840, 0xA6E6, 0x884C, 0xA6E7, 0x8863, 0xA8A3, 0x898B, 0xA8A4, 0x89D2, 0xA8A5, 0x8A00, 0xA8A6, 0x8C37, 0xA8A7, 0x8C46, 0xA8A8, 0x8C55, 0xA8A9, 0x8C9D, 0xA8AA, 0x8D64, 0xA8AB, 0x8D70, 0xA8AC, 0x8DB3, 0xA8AD, 0x8EAB, 0xA8AE, 0x8ECA, 0xA8AF, 0x8F9B, 0xA8B0, 0x8FB0, 0xA8B6, 0x9091, 0xA8BB, 0x9149, 0xA8BC, 0x91C6, 0xA8BD, 0x91CC, 0xAAF7, 0x91D1, 0xAAF8, 0x9577, 0xAAF9, 0x9580, 0xAAFA, 0x961C, 0xAB41, 0x96B9, 0xAB42, 0x96E8, 0xAB43, 0x9752, 0xAB44, 0x975E, 0xADB1, 0x9762, 0xADB2, 0x9769, 0xADB3, 0x97CB, 0xADB4, 0x97ED, 0xADB5, 0x97F3, 0xADB6, 0x9801, 0xADB7, 0x98A8, 0xADB8, 0x98DB, 0xADB9, 0x98DF, 0xADBA, 0x9996, 0xADBB, 0x9999, 0xB0A8, 0x99AC, 0xB0A9, 0x9AA8, 0xB0AA, 0x9AD8, 0xB0AB, 0x9B25, 0xB0AC, 0x9B32, 0xB0AD, 0x9B3C, 0xB3BD, 0x9B5A, 0xB3BE, 0x9CE5, 0xB3BF, 0x9E75, 0xB3C0, 0x9E7F, 0xB3C1, 0x9EA5, 0xB3C2, 0x9EBB, 0xB6C0, 0x9EC3, 0xB6C1, 0x9ECD, 0xB6C2, 0x9ED1, 0xB9A9, 0x9F0E, 0xB9AA, 0x9F13, 0xB9AB, 0x9F20, 0xBBF3, 0x9F3B, 0xBBF4, 0x9F4A, 0xBEA6, 0x9F52, 0xC073, 0x9F8D, 0xC074, 0x9F9C, 0xC942, 0x51F5, 0xC943, 0x531A, 0xC944, 0x5382, 0xC949, 0x56D7, 0xC94B, 0x5C6E, 0xC94C, 0x5F73, 0xC95F, 0x6BB3, 0xC961, 0x6C14, 0xC962, 0x723F, 0xC9A8, 0x79B8, 0xCA49, 0x7F51, 0xCA4A, 0x8278, 0xCA4F, 0x864D, 0xCA50, 0x897E, 0xCBA4, 0x8C78, 0xD449, 0x9ADF, 0xD44A, 0x9B2F, 0xDCB0, 0x9EF9, 0xE0EF, 0x9EFD, 0xEFB6, 0x9FA0}));
		$init($IBM950$DecodeHolder);
		$DoubleByte$Encoder::initC2B($IBM950$DecodeHolder::b2cStr, $IBM950$DecodeHolder::b2cSBStr, b2cNR, c2bNR, 64, 254, IBM950$EncodeHolder::c2b, IBM950$EncodeHolder::c2bIndex);
	}
}

IBM950$EncodeHolder::IBM950$EncodeHolder() {
}

$Class* IBM950$EncodeHolder::load$($String* name, bool initialize) {
	$loadClass(IBM950$EncodeHolder, name, initialize, &_IBM950$EncodeHolder_ClassInfo_, clinit$IBM950$EncodeHolder, allocate$IBM950$EncodeHolder);
	return class$;
}

$Class* IBM950$EncodeHolder::class$ = nullptr;

			} // ext
		} // cs
	} // nio
} // sun