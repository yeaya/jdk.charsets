#include <sun/nio/cs/ext/MacDingbat$Holder.h>

#include <sun/nio/cs/SingleByte.h>
#include <sun/nio/cs/ext/MacDingbat.h>
#include <jcpp.h>

using $ClassInfo = ::java::lang::ClassInfo;
using $FieldInfo = ::java::lang::FieldInfo;
using $InnerClassInfo = ::java::lang::InnerClassInfo;
using $MethodInfo = ::java::lang::MethodInfo;
using $SingleByte = ::sun::nio::cs::SingleByte;
using $MacDingbat = ::sun::nio::cs::ext::MacDingbat;

namespace sun {
	namespace nio {
		namespace cs {
			namespace ext {

$FieldInfo _MacDingbat$Holder_FieldInfo_[] = {
	{"b2cTable", "Ljava/lang/String;", nullptr, $PRIVATE | $STATIC | $FINAL, $staticField(MacDingbat$Holder, b2cTable)},
	{"b2c", "[C", nullptr, $PRIVATE | $STATIC | $FINAL, $staticField(MacDingbat$Holder, b2c)},
	{"c2b", "[C", nullptr, $PRIVATE | $STATIC | $FINAL, $staticField(MacDingbat$Holder, c2b)},
	{"c2bIndex", "[C", nullptr, $PRIVATE | $STATIC | $FINAL, $staticField(MacDingbat$Holder, c2bIndex)},
	{}
};

$MethodInfo _MacDingbat$Holder_MethodInfo_[] = {
	{"<init>", "()V", nullptr, $PRIVATE, $method(static_cast<void(MacDingbat$Holder::*)()>(&MacDingbat$Holder::init$))},
	{}
};

$InnerClassInfo _MacDingbat$Holder_InnerClassesInfo_[] = {
	{"sun.nio.cs.ext.MacDingbat$Holder", "sun.nio.cs.ext.MacDingbat", "Holder", $PRIVATE | $STATIC},
	{}
};

$ClassInfo _MacDingbat$Holder_ClassInfo_ = {
	$ACC_SUPER,
	"sun.nio.cs.ext.MacDingbat$Holder",
	"java.lang.Object",
	nullptr,
	_MacDingbat$Holder_FieldInfo_,
	_MacDingbat$Holder_MethodInfo_,
	nullptr,
	nullptr,
	_MacDingbat$Holder_InnerClassesInfo_,
	nullptr,
	nullptr,
	nullptr,
	"sun.nio.cs.ext.MacDingbat"
};

$Object* allocate$MacDingbat$Holder($Class* clazz) {
	return $of($alloc(MacDingbat$Holder));
}

$String* MacDingbat$Holder::b2cTable = nullptr;
$chars* MacDingbat$Holder::b2c = nullptr;
$chars* MacDingbat$Holder::c2b = nullptr;
$chars* MacDingbat$Holder::c2bIndex = nullptr;

void MacDingbat$Holder::init$() {
}

void clinit$MacDingbat$Holder($Class* class$) {
	$useLocalCurrentObjectStackCache();
	$assignStatic(MacDingbat$Holder::b2cTable, $cstr({0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0x2761, 0x2762, 0x2763, 0x2764, 0x2765, 0x2766, 0x2767, 0x2663, 0x2666, 0x2665, 0x2660, 0x2460, 0x2461, 0x2462, 0x2463, 0x2464, 0x2465, 0x2466, 0x2467, 0x2468, 0x2469, 0x2776, 0x2777, 0x2778, 0x2779, 0x277A, 0x277B, 0x277C, 0x277D, 0x277E, 0x277F, 0x2780, 0x2781, 0x2782, 0x2783, 0x2784, 0x2785, 0x2786, 0x2787, 0x2788, 0x2789, 0x278A, 0x278B, 0x278C, 0x278D, 0x278E, 0x278F, 0x2790, 0x2791, 0x2792, 0x2793, 0x2794, 0x2192, 0x2194, 0x2195, 0x2798, 0x2799, 0x279A, 0x279B, 0x279C, 0x279D, 0x279E, 0x279F, 0x27A0, 0x27A1, 0x27A2, 0x27A3, 0x27A4, 0x27A5, 0x27A6, 0x27A7, 0x27A8, 0x27A9, 0x27AA, 0x27AB, 0x27AC, 0x27AD, 0x27AE, 0x27AF, 0xFFFD, 0x27B1, 0x27B2, 0x27B3, 0x27B4, 0x27B5, 0x27B6, 0x27B7, 0x27B8, 0x27B9, 0x27BA, 0x27BB, 0x27BC, 0x27BD, 0x27BE, 0xFFFD, '\0', 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, '\b', '\t', '\n', 0xB, '\f', '\r', 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, ' ', 0x2701, 0x2702, 0x2703, 0x2704, 0x260E, 0x2706, 0x2707, 0x2708, 0x2709, 0x261B, 0x261E, 0x270C, 0x270D, 0x270E, 0x270F, 0x2710, 0x2711, 0x2712, 0x2713, 0x2714, 0x2715, 0x2716, 0x2717, 0x2718, 0x2719, 0x271A, 0x271B, 0x271C, 0x271D, 0x271E, 0x271F, 0x2720, 0x2721, 0x2722, 0x2723, 0x2724, 0x2725, 0x2726, 0x2727, 0x2605, 0x2729, 0x272A, 0x272B, 0x272C, 0x272D, 0x272E, 0x272F, 0x2730, 0x2731, 0x2732, 0x2733, 0x2734, 0x2735, 0x2736, 0x2737, 0x2738, 0x2739, 0x273A, 0x273B, 0x273C, 0x273D, 0x273E, 0x273F, 0x2740, 0x2741, 0x2742, 0x2743, 0x2744, 0x2745, 0x2746, 0x2747, 0x2748, 0x2749, 0x274A, 0x274B, 0x25CF, 0x274D, 0x25A0, 0x274F, 0x2750, 0x2751, 0x2752, 0x25B2, 0x25BC, 0x25C6, 0x2756, 0x25D7, 0x2758, 0x2759, 0x275A, 0x275B, 0x275C, 0x275D, 0x275E, 0x7F}));
	$assignStatic(MacDingbat$Holder::b2c, $nc(MacDingbat$Holder::b2cTable)->toCharArray());
	$assignStatic(MacDingbat$Holder::c2b, $new($chars, 1792));
	$assignStatic(MacDingbat$Holder::c2bIndex, $new($chars, 256));
	{
		$var($chars, b2cMap, MacDingbat$Holder::b2c);
		$var($chars, c2bNR, nullptr);
		$SingleByte::initC2B(b2cMap, c2bNR, MacDingbat$Holder::c2b, MacDingbat$Holder::c2bIndex);
	}
}

MacDingbat$Holder::MacDingbat$Holder() {
}

$Class* MacDingbat$Holder::load$($String* name, bool initialize) {
	$loadClass(MacDingbat$Holder, name, initialize, &_MacDingbat$Holder_ClassInfo_, clinit$MacDingbat$Holder, allocate$MacDingbat$Holder);
	return class$;
}

$Class* MacDingbat$Holder::class$ = nullptr;

			} // ext
		} // cs
	} // nio
} // sun